{"version":3,"file":"render-3d201317.js","sources":["../../node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-html/lib/render.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map"],"names":["templateFactory","result","templateCache","templateCaches","get","type","undefined","stringsArray","WeakMap","keyString","Map","set","template","strings","key","join","marker","Template","getTemplateElement","parts","render","container","options","part","removeNodes","firstChild","NodePart","Object","assign","appendInto","setValue","commit"],"mappings":";;;;;;;;;;;;;GAkBO,SAASA,EAAgBC,GAC5B,IAAIC,EAAgBC,EAAeC,IAAIH,EAAOI,WACxBC,IAAlBJ,IACAA,EAAgB,CACZK,aAAc,IAAIC,QAClBC,UAAW,IAAIC,KAEnBP,EAAeQ,IAAIV,EAAOI,KAAMH,IAEpC,IAAIU,EAAWV,EAAcK,aAAaH,IAAIH,EAAOY,SACrD,QAAiBP,IAAbM,EACA,OAAOA,EAIX,MAAME,EAAMb,EAAOY,QAAQE,KAAKC,GAWhC,OATAJ,EAAWV,EAAcO,UAAUL,IAAIU,QACtBR,IAAbM,IAEAA,EAAW,IAAIK,EAAShB,EAAQA,EAAOiB,sBAEvChB,EAAcO,UAAUE,IAAIG,EAAKF,IAGrCV,EAAcK,aAAaI,IAAIV,EAAOY,QAASD,GACxCA,EAEC,MAACT,EAAiB,IAAIO,IC9BrBS,EAAQ,IAAIX,QAgBZY,EAAS,CAACnB,EAAQoB,EAAWC,KACtC,IAAIC,EAAOJ,EAAMf,IAAIiB,QACRf,IAATiB,IACAC,EAAYH,EAAWA,EAAUI,YACjCN,EAAMR,IAAIU,EAAWE,EAAO,IAAIG,EAASC,OAAOC,OAAO,CAAE5B,gBAAAA,GAAmBsB,KAC5EC,EAAKM,WAAWR,IAEpBE,EAAKO,SAAS7B,GACdsB,EAAKQ;;;;;;;;;;;;;"}